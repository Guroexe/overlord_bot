import logging
import json
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

FREE_TRAIN_VIDEO = "https://www.youtube.com/watch?v=10b_j5gBAg8"
PRO_VERSION_VIDEO = "https://www.youtube.com/watch?v=QKLOb6f5L-k"
COLAB_URL = "https://colab.research.google.com/drive/1lWfrS0Jh0B2B99IJ26aincVXylaoLuDq?usp=sharing"
TRIBUT_URL = "https://t.me/tribute/app?startapp=ep_8y0gVeOLXYRcOrfRtGTMLW8vu0C82z72WfxBEEtJz3ofJTky32"

# –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è IKONA
IKONA_MAIN_VIDEO = "https://www.youtube.com/watch?v=GX_ZbWx0oYY"
IKONA_OFFLINE_VIDEO = "https://www.youtube.com/watch?v=Kopx3whZquc"
IKONA_ONLINE_VIDEO = "https://www.youtube.com/watch?v=10b_j5gBAg8"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤
try:
    with open("prompts.json", "r", encoding="utf-8") as f:
        PROMPTS = json.load(f)
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(PROMPTS)} –ø—Ä–æ–º—Ç–æ–≤")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ prompts.json: {str(e)}")
    PROMPTS = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} {user.username}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["prompt_index"] = 0
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ YouTube –≤–∏–¥–µ–æ
        await update.message.reply_text(f"üé¨ **–û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ:** {FREE_TRAIN_VIDEO}", parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        description = (
            "üñåÔ∏è **OVERLORD AI INK (Free Train)**\n\n"
            "–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ sigilism, tribal, dark tattoo. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OVERLORD INK AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
            "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Å–∫–∞–∑–æ–∫\n"
            "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. Sampling method - DPM++ 2M SDE. Steps - 20. Width - 720. Height - 980. CFG Scale - 4\n"
            "3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
            "*—Å–æ–∑–¥–∞—Ç–µ–ª—å - https://t.me/gurovlad*"
        )
        await update.message.reply_text(description, parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ GIF
        gif_path = os.path.join("static", "14.gif")
        try:
            with open(gif_path, "rb") as gif_file:
                await update.message.reply_animation(
                    animation=InputFile(gif_file),
                    caption=f"üöÄ **–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!** –ò—Å–ø–æ–ª—å–∑—É–π COLAB: {COLAB_URL}",
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {gif_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await update.message.reply_text(f"üöÄ **–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:** {COLAB_URL}", parse_mode='Markdown')
        
        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        keyboard = [
            [
                InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt"),
                InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–º—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        query = update.callback_query
        await query.answer()
        
        if not PROMPTS:
            await query.message.reply_text("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        current_index = context.user_data.get("prompt_index", 0)
        prompt_data = PROMPTS[current_index]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = os.path.join("static", prompt_data["image"])
        try:
            with open(image_path, "rb") as photo_file:
                await query.message.reply_photo(
                    photo=InputFile(photo_file),
                    caption=f"**–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞:**\n\n`{prompt_data['prompt']}`",
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await query.message.reply_text(f"**–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞:**\n\n`{prompt_data['prompt']}`", parse_mode='Markdown')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        next_index = (current_index + 1) % len(PROMPTS)
        context.user_data["prompt_index"] = next_index
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("–ï—â—ë –ø—Ä–∏–º–µ—Ä", callback_data="show_prompt"),
                InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("**–ß—Ç–æ –¥–∞–ª—å—à–µ?**", reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_prompt: {str(e)}")
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä")

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("OVERLORD AI INK (Free Train)", callback_data="free_train")],
            [InlineKeyboardButton("–ü–æ–ª–Ω–∞—è –í–µ—Ä—Å–∏—è OVERLORD AI INK PRO", callback_data="pro_version")],
            [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="ikona_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("**–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**", reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu: {str(e)}")

async def free_train(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        await query.message.reply_text(f"üé¨ **–û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ:** {FREE_TRAIN_VIDEO}", parse_mode='Markdown')
        
        description = (
            "üñåÔ∏è **OVERLORD AI INK (Free Train)**\n\n"
            "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å 3 —Å—Ç–∏–ª—è–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ sigilism, tribal, dark tattoo. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OVERLORD INK AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
            "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
            "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
            "3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
            "*—Å–æ–∑–¥–∞—Ç–µ–ª—å - https://t.me/gurovlad*"
        )
        await query.message.reply_text(description, parse_mode='Markdown')
        
        gif_path = os.path.join("static", "14.gif")
        try:
            with open(gif_path, "rb") as gif_file:
                await query.message.reply_animation(
                    animation=InputFile(gif_file),
                    caption=f"üöÄ **–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!** COLAB: {COLAB_URL}",
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            await query.message.reply_text(f"üöÄ **–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:** {COLAB_URL}", parse_mode='Markdown')
        
        keyboard = [
            [
                InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt"),
                InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ free_train: {str(e)}")

async def pro_version(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PRO –≤–µ—Ä—Å–∏–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PRO –≤–∏–¥–µ–æ
        await query.message.reply_text(f"üé¨ **PRO –û–±—É—á–µ–Ω–∏–µ:** {PRO_VERSION_VIDEO}", parse_mode='Markdown')
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ PRO
        pro_features = (
            "üî• **OVERLORD AI INK PRO** - **–ü–æ–ª–Ω–∞—è –í–µ—Ä—Å–∏—è —Å 30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏!**\n\n"
            "**–û—Ç–ª–∏—á–∏—è –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:**\n"
            "‚úÖ 30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å—Ç–∏–ª–µ–π\n"
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –í 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ\n"
            "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π\n"
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–º—Ç–æ–≤\n\n"
            "**–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π!**\n\n"
            "*—Å–æ–∑–¥–∞—Ç–µ–ª—å - https://t.me/gurovlad*"
        )
        await query.message.reply_text(pro_features, parse_mode='Markdown')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ PRO GIF —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
        pro_gif_path = os.path.join("static", "9d.gif")
        try:
            with open(pro_gif_path, "rb") as pro_gif_file:
                keyboard_pro = [
                    [InlineKeyboardButton("üî• –û—Ñ–æ—Ä–º–∏—Ç—å PRO", url=TRIBUT_URL)]
                ]
                reply_markup_pro = InlineKeyboardMarkup(keyboard_pro)
                
                await query.message.reply_animation(
                    animation=InputFile(pro_gif_file),
                    caption="üî• **PRO –≤–µ—Ä—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!**",
                    reply_markup=reply_markup_pro,
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            keyboard_pro = [
                [InlineKeyboardButton("üî• –û—Ñ–æ—Ä–º–∏—Ç—å PRO", url=TRIBUT_URL)]
            ]
            reply_markup_pro = InlineKeyboardMarkup(keyboard_pro)
            await query.message.reply_text(
                "üî• **PRO –≤–µ—Ä—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!**",
                reply_markup=reply_markup_pro,
                parse_mode='Markdown'
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pro_version: {str(e)}")

async def ikona_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è IKONA"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await query.message.reply_text(f"üé¨ **–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA:** {IKONA_MAIN_VIDEO}", parse_mode='Markdown')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        ikona_text = (
            "üé® **–û–ë–£–ß–ï–ù–ò–ï –¢–ê–¢–£ IKONA**\n\n"
            "–û–±—É—á–µ–Ω–∏—è –ò–∫–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∫–æ–ª–æ—Ç—å **–°–¢–ò–õ–¨** –∏ –±—ã—Å—Ç—Ä–æ –≤–æ—Ä–≤–∞—Ç—å—Å—è –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏—é –∏ –∑–∞–Ω—è—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ!\n\n"
            "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–æ–∑–¥–∞–¥–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å —ç—Å–∫–∏–∑–æ–≤ –¥–ª—è —Ç–∞—Ç—É–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–æ—á–∏–º –¥–æ –∏–¥–µ–∞–ª–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –µ–≥–æ –Ω–∞ –∫–æ–∂—É!\n\n"
            "–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—à–∏–º —É—á–µ–Ω–∏–∫–∞–º —É–∂–µ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏ —Å —á–µ–º –º—ã —Ç–æ–∂–µ –ø–æ–º–æ–∂–µ–º!\n\n"
            "**–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!**"
        )
        await query.message.reply_text(ikona_text, parse_mode='Markdown')
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        keyboard = [
            [InlineKeyboardButton("–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA –≤ –ú–æ—Å–∫–≤–µ –∏ –ü–∏—Ç–µ—Ä–µ", callback_data="ikona_offline")],
            [InlineKeyboardButton("–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA", callback_data="ikona_online")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:**", reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ikona_main: {str(e)}")

async def ikona_offline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–∏ IKONA"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await query.message.reply_text(f"üé¨ **–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA:** {IKONA_OFFLINE_VIDEO}", parse_mode='Markdown')
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        offline_text = (
            "üè¢ **–û–§–§–õ–ê–ô–ù –û–ë–£–ß–ï–ù–ò–ï IKONA –í –ú–û–°–ö–í–ï –ò –ü–ò–¢–ï–†–ï**\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è —Å —É—á–∏—Ç–µ–ª–µ–º IKONA –¥–µ–π—Å—Ç–≤—É—é—â–∏–º —Ç–∞—Ç—É-–º–∞—Å—Ç–µ—Ä–æ–º –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–∂–µ –∏ –Ω–∞ –ª—é–¥—è—Ö.\n\n"
            "**–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**\n"
            "‚Ä¢ –°–æ–∑–¥–∞–¥–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ò–ò\n"
            "‚Ä¢ –ù–∞—É—á–∏–º –µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ –Ω–∞–±–∏–≤–∞—Ç—å –Ω–∞ –∫–æ–∂–µ\n"
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–∂–µ –∏ –∂–∏–≤—ã—Ö –º–æ–¥–µ–ª—è—Ö\n"
            "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –æ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞\n\n"
            "**–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è:** 2 –º–µ—Å—è—Ü–∞\n"
            "**–°—Ç–æ–∏–º–æ—Å—Ç—å:** 99 000 —Ä—É–±–ª–µ–π\n\n"
            "**–ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ü–µ—Ä–≤—ã–π –£—Ä–æ–∫**, –≥–¥–µ –º—ã –ø–æ–¥—Ä–æ–±–Ω–æ –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –∏ –¥–∞–¥–∏–º –Ω–∞–±–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–∂–µ! –ü–æ–ø—Ä–æ–±—É–µ—à—å —Å–µ–±—è –≤ —Ä–æ–ª–∏ –¢–∞—Ç—É-–ú–∞—Å—Ç–µ—Ä–∞!"
        )
        await query.message.reply_text(offline_text, parse_mode='Markdown')
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ü—Ä–æ–±–Ω—ã–π –£—Ä–æ–∫ / –û–±—É—á–µ–Ω–∏–µ", callback_data="ikona_contact")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ikona_offline: {str(e)}")

async def ikona_online(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–∏ IKONA"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await query.message.reply_text(f"üé¨ **–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA:** {IKONA_ONLINE_VIDEO}", parse_mode='Markdown')
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        online_text = (
            "üíª **–û–ù–õ–ê–ô–ù –û–ë–£–ß–ï–ù–ò–ï IKONA**\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –±–ª–æ–∫–∞ **–û–±—É—á–µ–Ω–∏–µ –ò–ò** –∏ **–û–Ω–ª–∞–π–Ω –£—Ä–æ–∫–∏ —Å –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º**.\n\n"
            "**–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞:**\n"
            "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –ò–ò –≤–µ–¥–µ—Ç—Å—è –æ–Ω–ª–∞–π–Ω —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –∏ –æ–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è —Ç–∞—Ç—É\n"
            "‚Ä¢ –û–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∏ –ø–æ –Ω–∞–Ω–µ—Å–µ–Ω–∏—é —Ç–∞—Ç—É –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–∞—Ç—É –º–∞—à–∏–Ω–∫–∞ —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Å–∞–ª–æ–Ω–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
            "**–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è:** 2 –º–µ—Å—è—Ü–∞\n"
            "**–°—Ç–æ–∏–º–æ—Å—Ç—å:** 79 000 —Ä—É–±–ª–µ–π\n\n"
            "–≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä—É–∫—É –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ –≤–∞–∂–Ω—ã–µ –∑–Ω–∞–Ω–∏—è!"
        )
        await query.message.reply_text(online_text, parse_mode='Markdown')
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ / –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="ikona_contact")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ikona_online: {str(e)}")

async def ikona_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ IKONA"""
    try:
        query = update.callback_query
        await query.answer()
        
        contact_text = (
            "üìû **–ó–ê–ü–ò–°–¨ –ù–ê –û–ë–£–ß–ï–ù–ò–ï**\n\n"
            "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ / –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ / –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –û–±—É—á–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ–º:\n\n"
            "**@vladguro**\n\n"
            "–í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
        await query.message.reply_text(contact_text, parse_mode='Markdown')
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ikona_contact: {str(e)}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await update.message.reply_text("**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é**", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {str(e)}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(show_prompt, pattern="^show_prompt$"))
        application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
        application.add_handler(CallbackQueryHandler(free_train, pattern="^free_train$"))
        application.add_handler(CallbackQueryHandler(pro_version, pattern="^pro_version$"))
        application.add_handler(CallbackQueryHandler(ikona_main, pattern="^ikona_main$"))
        application.add_handler(CallbackQueryHandler(ikona_offline, pattern="^ikona_offline$"))
        application.add_handler(CallbackQueryHandler(ikona_online, pattern="^ikona_online$"))
        application.add_handler(CallbackQueryHandler(ikona_contact, pattern="^ikona_contact$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

if __name__ == "__main__":
    main()
