import logging
import json
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TOKEN", "7972832759:AAGLOsFkxn_elDVNKsM2hk7Vt1qpoQawE2o")
YOUTUBE_URL = "https://www.youtube.com/watch?v=J4qY9DYE184"
COLAB_URL = "https://colab.research.google.com/drive/your-colab-link"
TRIBUT_URL = "https://t.me/your_tribut_channel"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤
with open("prompts.json", "r", encoding="utf-8") as f:
    PROMPTS = json.load(f)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_states[user_id] = {"prompt_index": 0}
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ YouTube –≤–∏–¥–µ–æ
    await update.message.reply_text(f"üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ: {YOUTUBE_URL}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    description = (
        "üñåÔ∏è OVERLORD AI INK (Free Train)\n\n"
        "–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ –∏ –º–∞–Ω–≥–∞. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Stable Diffusion –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å—Ç–∏–ª—å, –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é)\n"
        "3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
    )
    await update.message.reply_text(description)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ GIF
    gif_path = os.path.join("static", "14.gif")
    with open(gif_path, "rb") as gif_file:
        await update.message.reply_animation(
            animation=InputFile(gif_file),
            caption=f"üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {COLAB_URL}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞"
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º—Ç—ã:", reply_markup=reply_markup)

async def show_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–º—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_state = user_states.get(user_id, {"prompt_index": 0})
    current_index = user_state["prompt_index"]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º—Ç–∞
    prompt_data = PROMPTS[current_index]
    image_path = os.path.join("static", prompt_data["image"])
    prompt_text = prompt_data["prompt"]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with open(image_path, "rb") as photo_file:
        await query.message.reply_photo(
            photo=InputFile(photo_file),
            caption=prompt_text
        )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
    next_index = (current_index + 1) % len(PROMPTS)
    user_states[user_id] = {"prompt_index": next_index}
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("–ï—â—ë –ø—Ä–∏–º–µ—Ä", callback_data="show_prompt"),
            InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("OVERLORD AI INK (Free Train)", callback_data="free_train")],
        [InlineKeyboardButton("–ü–æ–ª–Ω–∞—è –í–µ—Ä—Å–∏—è OVERLORD AI INK PRO", callback_data="pro_version")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

async def free_train(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /start
    await query.message.reply_text(f"üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ: {YOUTUBE_URL}")
    
    description = (
        "üñåÔ∏è OVERLORD AI INK (Free Train)\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
    )
    await query.message.reply_text(description)
    
    gif_path = os.path.join("static", "14.gif")
    with open(gif_path, "rb") as gif_file:
        await query.message.reply_animation(
            animation=InputFile(gif_file),
            caption=f"üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {COLAB_URL}"
        )
    
    keyboard = [[InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º—Ç—ã:", reply_markup=reply_markup)

async def pro_version(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PRO –≤–µ—Ä—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ PRO
    pro_features = (
        "üî• OVERLORD AI INK PRO - –ü—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—è\n\n"
        "–û—Ç–ª–∏—á–∏—è –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:\n"
        "‚úÖ 20+ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å—Ç–∏–ª–µ–π\n"
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ LoRA-–∞–¥–∞–ø—Ç–µ—Ä–æ–≤\n"
        "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π\n"
        "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ 4K —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏\n\n"
        "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π!"
    )
    await query.message.reply_text(pro_features)
    
    # –ü–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Tribut
    subscriptions = (
        "üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:\n\n"
        "1 –º–µ—Å—è—Ü - 2990‚ÇΩ\n"
        "–ù–∞–≤—Å–µ–≥–¥–∞ - 11990‚ÇΩ\n\n"
        f"–û—Ñ–æ—Ä–º–∏—Ç—å: {TRIBUT_URL}"
    )
    await query.message.reply_text(subscriptions)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(show_prompt, pattern="^show_prompt$"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(free_train, pattern="^free_train$"))
    application.add_handler(CallbackQueryHandler(pro_version, pattern="^pro_version$"))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
