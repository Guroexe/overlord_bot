from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import json

PROMPT_IMAGES = ["1.png", "2.png", "3.png", "4.png"]
PROMPTS = json.load(open("prompts.json"))
user_prompt_index = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_prompt_index[chat_id] = 0

    await update.message.reply_text("üîó –í–∏–¥–µ–æ: https://www.youtube.com/watch?v=J4qY9DYE184")
    await update.message.reply_text("üß† OVERLORD AI INK (Free Train):\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Stable Diffusion –±–µ—Å–ø–ª–∞—Ç–Ω–æ...\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –Ω–∏–∂–µ üëá")

    await context.bot.send_animation(chat_id=chat_id,
        animation="https://huggingface.co/guroexe/overlord_bot/resolve/main/14.gif",
        caption="üî• –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Google Colab: [–∂–º–∏ —Å—é–¥–∞](https://colab.research.google.com/drive/1vR5xxZ...)", parse_mode='Markdown'
    )

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="example")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")],
        [InlineKeyboardButton("–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è OVERLORD AI INK PRO", callback_data="pro")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_example(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    await query.answer()

    index = user_prompt_index.get(chat_id, 0)
    img = PROMPT_IMAGES[index]
    prompt_text = PROMPTS[img]

    url = f"https://huggingface.co/guroexe/overlord_bot/resolve/main/{img}"
    await context.bot.send_photo(chat_id=chat_id, photo=url, caption=prompt_text)

    user_prompt_index[chat_id] = (index + 1) % len(PROMPT_IMAGES)

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="example")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
    ]
    await context.bot.send_message(chat_id=chat_id, text="–•–æ—á–µ—à—å –µ—â—ë?", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("OVERLORD AI INK (Free Train)", callback_data="start")],
        [InlineKeyboardButton("–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è OVERLORD AI INK PRO", callback_data="pro")]
    ]
    await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_pro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "‚öôÔ∏è –†–∞–∑–Ω–∏—Ü–∞ —Å PRO –≤–µ—Ä—Å–∏–µ–π:\n‚Äî –¥–æ—Å—Ç—É–ø –∫ –º–Ω–æ–∂–µ—Å—Ç–≤—É –º–æ–¥–µ–ª–µ–π\n‚Äî –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª—è —á–µ—Ä–µ–∑ Lora\n‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø\n\n–ü–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Tribut:"
    )

    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü ‚Äî 2990‚ÇΩ", url="https://t.me/tribut_link_1")],
        [InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî 11990‚ÇΩ", url="https://t.me/tribut_link_2")]
    ]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))

def main():
    app = ApplicationBuilder().token("7972832759:AAEwXCLf7bXdYguvmx4cJvPCfnfWmslXVW8").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(show_example, pattern="^example$"))
    app.add_handler(CallbackQueryHandler(show_menu, pattern="^menu$"))
    app.add_handler(CallbackQueryHandler(start, pattern="^start$"))
    app.add_handler(CallbackQueryHandler(show_pro, pattern="^pro$"))
    app.run_polling()

if __name__ == "__main__":
    main()
