import logging
import json
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TOKEN")
FREE_TRAIN_VIDEO = "https://www.youtube.com/watch?v=10b_j5gBAg8"
PRO_VERSION_VIDEO = "https://www.youtube.com/watch?v=QKLOb6f5L-k"
COLAB_URL = "https://colab.research.google.com/drive/1lWfrS0Jh0B2B99IJ26aincVXylaoLuDq?usp=sharing"
TRIBUT_URL = "https://t.me/tribute/app?startapp=ep_8y0gVeOLXYRcOrfRtGTMLW8vu0C82z72WfxBEEtJz3ofJTky32"
TATTOO_TRAINING_VIDEO = "https://www.youtube.com/watch?v=GX_ZbWx0oYY"
OFFLINE_TRAINING_VIDEO = "https://www.youtube.com/watch?v=Kopx3whZquc"
ONLINE_TRAINING_VIDEO = "https://www.youtube.com/watch?v=10b_j5gBAg8"
CREATOR_CHANNEL = "https://t.me/gurovlad"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤
with open("prompts.json", "r", encoding="utf-8") as f:
    PROMPTS = json.load(f)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_states[user.id] = {"prompt_index": 0}
    
    await update.message.reply_text(f"<b>üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ:</b>\n{FREE_TRAIN_VIDEO}", parse_mode='HTML')
    
    description = (
        "<b>üñåÔ∏è OVERLORD AI INK (Free Train)</b>\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ sigilism, tribal, dark tattoo.\n\n"
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (Sampling method - DPM++ 2M SDE, Steps - 20)\n"
        "3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_CHANNEL}"
    )
    await update.message.reply_text(description, parse_mode='HTML')
    
    try:
        with open(os.path.join("static", "14.gif"), "rb") as gif_file:
            await update.message.reply_animation(
                animation=InputFile(gif_file),
                caption=f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π COLAB: {COLAB_URL}",
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Error sending gif: {e}")
        await update.message.reply_text(f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:</b>\n{COLAB_URL}", parse_mode='HTML')
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt")],
        [InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")],
        [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="tattoo_training")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–º—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_state = user_states.get(user_id, {"prompt_index": 0})
    current_index = user_state["prompt_index"]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º—Ç–∞
    prompt_data = PROMPTS[current_index]
    image_path = os.path.join("static", prompt_data["image"])
    prompt_text = prompt_data["prompt"]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        with open(image_path, "rb") as photo_file:
            await query.message.reply_photo(
                photo=InputFile(photo_file),
                caption=prompt_text,
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Error sending photo: {e}")
        await query.message.reply_text(
            f"–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞:\n{prompt_text}\n\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
            parse_mode='HTML'
        )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
    next_index = (current_index + 1) % len(PROMPTS)
    user_states[user_id] = {"prompt_index": next_index}
    
    keyboard = [
        [InlineKeyboardButton("–ï—â—ë –ø—Ä–∏–º–µ—Ä", callback_data="show_prompt")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("OVERLORD AI INK (Free Train)", callback_data="free_train")],
        [InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")],
        [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="tattoo_training")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=reply_markup, parse_mode='HTML')

async def free_train(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(f"<b>üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ:</b>\n{FREE_TRAIN_VIDEO}", parse_mode='HTML')
    
    description = (
        "<b>üñåÔ∏è OVERLORD AI INK (Free Train)</b>\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å 3 —Å—Ç–∏–ª—è–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_CHANNEL}"
    )
    await query.message.reply_text(description, parse_mode='HTML')
    
    try:
        with open(os.path.join("static", "14.gif"), "rb") as gif_file:
            await query.message.reply_animation(
                animation=InputFile(gif_file),
                caption=f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!</b>\nCOLAB: {COLAB_URL}",
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Error sending gif: {e}")
        await query.message.reply_text(f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:</b>\n{COLAB_URL}", parse_mode='HTML')
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt")],
        [InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")],
        [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="tattoo_training")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (pro_version, tattoo_training, offline_training, online_training, sign_up) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ...

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(show_prompt, pattern="^show_prompt$"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(free_train, pattern="^free_train$"))
    application.add_handler(CallbackQueryHandler(pro_version, pattern="^pro_version$"))
    application.add_handler(CallbackQueryHandler(tattoo_training, pattern="^tattoo_training$"))
    application.add_handler(CallbackQueryHandler(offline_training, pattern="^offline_training$"))
    application.add_handler(CallbackQueryHandler(online_training, pattern="^online_training$"))
    application.add_handler(CallbackQueryHandler(sign_up, pattern="^sign_up$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    application.run_polling()

if __name__ == "__main__":
    main()
