import logging
import json
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

FREE_TRAIN_VIDEO = "https://www.youtube.com/watch?v=10b_j5gBAg8"
PRO_VERSION_VIDEO = "https://www.youtube.com/watch?v=QKLOb6f5L-k"
COLAB_URL = "https://colab.research.google.com/drive/1lWfrS0Jh0B2B99IJ26aincVXylaoLuDq?usp=sharing"
TRIBUT_URL = "https://t.me/tribute/app?startapp=ep_8y0gVeOLXYRcOrfRtGTMLW8vu0C82z72WfxBEEtJz3ofJTky32"
TATTOO_TRAINING_VIDEO = "https://www.youtube.com/watch?v=GX_ZbWx0oYY"
OFFLINE_TRAINING_VIDEO = "https://www.youtube.com/watch?v=Kopx3whZquc"
ONLINE_TRAINING_VIDEO = "https://www.youtube.com/watch?v=10b_j5gBAg8"
CREATOR_CHANNEL = "https://t.me/gurovlad"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤
try:
    with open("prompts.json", "r", encoding="utf-8") as f:
        PROMPTS = json.load(f)
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(PROMPTS)} –ø—Ä–æ–º—Ç–æ–≤")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ prompts.json: {str(e)}")
    PROMPTS = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} {user.username}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["prompt_index"] = 0
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ YouTube –≤–∏–¥–µ–æ
        await update.message.reply_text(f"<b>üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ:</b>\n{FREE_TRAIN_VIDEO}", parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å —Ä–µ–∫–ª–∞–º–æ–π –∫–∞–Ω–∞–ª–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
        description = (
            "<b>üñåÔ∏è OVERLORD AI INK (Free Train)</b>\n\n"
            "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ sigilism, tribal, dark tattoo. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OVERLORD INK AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
            "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
            "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (Sampling method - DPM++ 2M SDE, Steps - 20, Width - 720, Height - 980, CFG Scale - 4)\n"
            "3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
            f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_CHANNEL}"
        )
        await update.message.reply_text(description, parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ GIF
        gif_path = os.path.join("static", "14.gif")
        try:
            with open(gif_path, "rb") as gif_file:
                await update.message.reply_animation(
                    animation=InputFile(gif_file),
                    caption=f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π COLAB: {COLAB_URL}",
                    parse_mode='HTML'
                )
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {gif_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await update.message.reply_text(f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:</b>\n{COLAB_URL}", parse_mode='HTML')
        
        # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt")],
            [InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")],
            [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="tattoo_training")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–º—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        query = update.callback_query
        await query.answer()
        
        if not PROMPTS:
            await query.message.reply_text("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        current_index = context.user_data.get("prompt_index", 0)
        prompt_data = PROMPTS[current_index]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = os.path.join("static", prompt_data["image"])
        try:
            with open(image_path, "rb") as photo_file:
                await query.message.reply_photo(
                    photo=InputFile(photo_file),
                    caption=f"<b>–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞:</b>\n{prompt_data['prompt']}",
                    parse_mode='HTML'
                )
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await query.message.reply_text(f"<b>–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞:</b>\n{prompt_data['prompt']}", parse_mode='HTML')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        next_index = (current_index + 1) % len(PROMPTS)
        context.user_data["prompt_index"] = next_index
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("–ï—â—ë –ø—Ä–∏–º–µ—Ä", callback_data="show_prompt")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_prompt: {str(e)}")
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä")

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("OVERLORD AI INK (Free Train)", callback_data="free_train")],
            [InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")],
            [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="tattoo_training")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu: {str(e)}")

async def free_train(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        await query.message.reply_text(f"<b>üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ:</b>\n{FREE_TRAIN_VIDEO}", parse_mode='HTML')
        
        description = (
            "<b>üñåÔ∏è OVERLORD AI INK (Free Train)</b>\n\n"
            "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å 3 —Å—Ç–∏–ª—è–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ sigilism, tribal, dark tattoo. "
            "–ò–¥–µ–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∞—Ç—É-—ç—Å–∫–∏–∑–æ–≤.\n\n"
            f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_CHANNEL}"
        )
        await query.message.reply_text(description, parse_mode='HTML')
        
        gif_path = os.path.join("static", "14.gif")
        try:
            with open(gif_path, "rb") as gif_file:
                await query.message.reply_animation(
                    animation=InputFile(gif_file),
                    caption=f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!</b>\nCOLAB: {COLAB_URL}",
                    parse_mode='HTML'
                )
        except FileNotFoundError:
            await query.message.reply_text(f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:</b>\n{COLAB_URL}", parse_mode='HTML')
        
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt")],
            [InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")],
            [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="tattoo_training")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ free_train: {str(e)}")

async def pro_version(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PRO –≤–µ—Ä—Å–∏–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PRO –≤–∏–¥–µ–æ
        await query.message.reply_text(f"<b>üé¨ PRO –û–±—É—á–µ–Ω–∏–µ:</b>\n{PRO_VERSION_VIDEO}", parse_mode='HTML')
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ PRO
        pro_features = (
            "<b>üî• OVERLORD AI INK PRO - –ü–æ–ª–Ω–∞—è –í–µ—Ä—Å–∏—è —Å 30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏!</b>\n\n"
            "<b>–û—Ç–ª–∏—á–∏—è –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:</b>\n"
            "‚úÖ 30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å—Ç–∏–ª–µ–π\n"
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)\n"
            "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π\n"
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
            "‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–º—Ç–æ–≤\n\n"
            "<b>–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π!</b>\n\n"
            f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_CHANNEL}"
        )
        await query.message.reply_text(pro_features, parse_mode='HTML')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ PRO GIF —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
        pro_gif_path = os.path.join("static", "9d.gif")
        try:
            with open(pro_gif_path, "rb") as pro_gif_file:
                keyboard_pro = [
                    [InlineKeyboardButton("üî• –û—Ñ–æ—Ä–º–∏—Ç—å PRO", url=TRIBUT_URL)]
                ]
                reply_markup_pro = InlineKeyboardMarkup(keyboard_pro)
                
                await query.message.reply_animation(
                    animation=InputFile(pro_gif_file),
                    caption="<b>üî• PRO –≤–µ—Ä—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!</b>",
                    parse_mode='HTML',
                    reply_markup=reply_markup_pro
                )
        except FileNotFoundError:
            keyboard_pro = [
                [InlineKeyboardButton("üî• –û—Ñ–æ—Ä–º–∏—Ç—å PRO", url=TRIBUT_URL)]
            ]
            reply_markup_pro = InlineKeyboardMarkup(keyboard_pro)
            await query.message.reply_text(
                "<b>üî• PRO –≤–µ—Ä—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!</b>",
                parse_mode='HTML',
                reply_markup=reply_markup_pro
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pro_version: {str(e)}")

async def tattoo_training(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await query.message.reply_text(f"<b>üé¨ –û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA:</b>\n{TATTOO_TRAINING_VIDEO}", parse_mode='HTML')
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
        description = (
            "<b>–û–±—É—á–µ–Ω–∏–µ –ò–∫–æ–Ω–∞</b>\n\n"
            "–°–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∫–æ–ª–æ—Ç—å –°–¢–ò–õ–¨ –∏ –±—ã—Å—Ç—Ä–æ –≤–æ—Ä–≤–∞—Ç—å—Å—è –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏—é, "
            "–∑–∞–Ω—è–≤ —Å–≤–æ–µ –º–µ—Å—Ç–æ! –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞–¥–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π "
            "—Å—Ç–∏–ª—å —ç—Å–∫–∏–∑–æ–≤ –¥–ª—è —Ç–∞—Ç—É–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç—Ç–æ—á–∏–º –¥–æ –∏–¥–µ–∞–ª–∞ –µ–≥–æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞ –∫–æ–∂—É!\n\n"
            "<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            "‚Ä¢ –£–∂–µ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π —Å –Ω–∞—à–µ–π –ø–æ–º–æ—â—å—é\n\n"
            "<b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!</b>"
        )
        await query.message.reply_text(description, parse_mode='HTML')
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA –≤ –ú–æ—Å–∫–≤–µ –∏ –ü–∏—Ç–µ—Ä–µ", callback_data="offline_training")],
            [InlineKeyboardButton("–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA", callback_data="online_training")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ tattoo_training: {str(e)}")

async def offline_training(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await query.message.reply_text(f"<b>üé¨ –û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ:</b>\n{OFFLINE_TRAINING_VIDEO}", parse_mode='HTML')
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è
        description = (
            "<b>–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA –≤ –ú–æ—Å–∫–≤–µ –∏ –ü–∏—Ç–µ—Ä–µ</b>\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è —Å —É—á–∏—Ç–µ–ª–µ–º IKONA - –¥–µ–π—Å—Ç–≤—É—é—â–∏–º —Ç–∞—Ç—É-–º–∞—Å—Ç–µ—Ä–æ–º –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–∂–µ –∏ –Ω–∞ –ª—é–¥—è—Ö\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ò–ò\n"
            "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω–æ–º—É –Ω–∞–Ω–µ—Å–µ–Ω–∏—é —Å—Ç–∏–ª—è –Ω–∞ –∫–æ–∂—É\n\n"
            "<b>–î–µ—Ç–∞–ª–∏:</b>\n"
            "‚Ä¢ –°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è: 2 –º–µ—Å—è—Ü–∞\n"
            "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 99 000‚ÇΩ\n\n"
            "<b>–ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ü–µ—Ä–≤—ã–π –£—Ä–æ–∫!</b>\n"
            "–ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–µ–º –∏ –¥–∞–¥–∏–º –Ω–∞–±–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–∂–µ. "
            "–ü–æ–ø—Ä–æ–±—É–µ—à—å —Å–µ–±—è –≤ —Ä–æ–ª–∏ –¢–∞—Ç—É-–ú–∞—Å—Ç–µ—Ä–∞!"
        )
        await query.message.reply_text(description, parse_mode='HTML')
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ü—Ä–æ–±–Ω—ã–π –£—Ä–æ–∫ / –û–±—É—á–µ–Ω–∏–µ", callback_data="sign_up")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ offline_training: {str(e)}")

async def online_training(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await query.message.reply_text(f"<b>üé¨ –û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ:</b>\n{ONLINE_TRAINING_VIDEO}", parse_mode='HTML')
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è
        description = (
            "<b>–û–Ω–ª–∞–π–Ω –û–±—É—á–µ–Ω–∏–µ IKONA</b>\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö –±–ª–æ–∫–æ–≤:\n"
            "1. <b>–û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–µ —Å –ò–ò</b>\n"
            "   ‚Ä¢ –û–Ω–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º\n"
            "   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è —Ç–∞—Ç—É\n\n"
            "2. <b>–û–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∏ –ø–æ –Ω–∞–Ω–µ—Å–µ–Ω–∏—é —Ç–∞—Ç—É</b>\n"
            "   ‚Ä¢ –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏\n"
            "   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É–∫–∏\n"
            "   ‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π\n"
            "   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è\n\n"
            "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
            "‚Ä¢ –ü—Ä–∏—à–ª–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–∞—Ç—É –º–∞—à–∏–Ω–∫—É —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏\n"
            "‚Ä¢ –ü–æ–º–æ–∂–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–∞–ª–æ–Ω –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n"
            "‚Ä¢ –ü–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Å–µ–∞–Ω—Å–∞\n"
            "‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n\n"
            "<b>–î–µ—Ç–∞–ª–∏:</b>\n"
            "‚Ä¢ –°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è: 2 –º–µ—Å—è—Ü–∞\n"
            "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 79 000‚ÇΩ"
        )
        await query.message.reply_text(description, parse_mode='HTML')
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ / –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="sign_up")],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ online_training: {str(e)}")

async def sign_up(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"""
    try:
        query = update.callback_query
        await query.answer()
        
        message = (
            "<b>–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ</b>\n\n"
            "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫, –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
            "1. –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @vladguro\n"
            "2. –£–∫–∞–∂–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è (–æ—Ñ—Ñ–ª–∞–π–Ω/–æ–Ω–ª–∞–π–Ω)\n"
            "3. –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
        await query.message.reply_text(message, parse_mode='HTML')
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ sign_up: {str(e)}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {str(e)}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(show_prompt, pattern="^show_prompt$"))
        application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
        application.add_handler(CallbackQueryHandler(free_train, pattern="^free_train$"))
        application.add_handler(CallbackQueryHandler(pro_version, pattern="^pro_version$"))
        application.add_handler(CallbackQueryHandler(tattoo_training, pattern="^tattoo_training$"))
        application.add_handler(CallbackQueryHandler(offline_training, pattern="^offline_training$"))
        application.add_handler(CallbackQueryHandler(online_training, pattern="^online_training$"))
        application.add_handler(CallbackQueryHandler(sign_up, pattern="^sign_up$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

if __name__ == "__main__":
    main()
