import logging
import json
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TOKEN")
FREE_TRAIN_VIDEO = "https://www.youtube.com/watch?v=10b_j5gBAg8"
PRO_VERSION_VIDEO = "https://www.youtube.com/watch?v=QKLOb6f5L-k"
COLAB_URL = "https://colab.research.google.com/drive/1lWfrS0Jh0B2B99IJ26aincVXylaoLuDq?usp=sharing"
TRIBUT_URL = "https://t.me/tribute/app?startapp=ep_8y0gVeOLXYRcOrfRtGTMLW8vu0C82z72WfxBEEtJz3ofJTky32"
TATTOO_TRAINING_VIDEO = "https://www.youtube.com/watch?v=GX_ZbWx0oYY"
OFFLINE_TRAINING_VIDEO = "https://www.youtube.com/watch?v=Kopx3whZquc"
ONLINE_TRAINING_VIDEO = "https://www.youtube.com/watch?v=10b_j5gBAg8"
CREATOR_CHANNEL = "https://t.me/gurovlad"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤
with open("prompts.json", "r", encoding="utf-8") as f:
    PROMPTS = json.load(f)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    context.user_data["prompt_index"] = 0
    
    await update.message.reply_text(f"<b>üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ:</b>\n{FREE_TRAIN_VIDEO}", parse_mode='HTML')
    
    description = (
        "<b>üñåÔ∏è OVERLORD AI INK (Free Train)</b>\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ sigilism, tribal, dark tattoo.\n\n"
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (Sampling method - DPM++ 2M SDE, Steps - 20)\n"
        "3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_CHANNEL}"
    )
    await update.message.reply_text(description, parse_mode='HTML')
    
    try:
        with open(os.path.join("static", "14.gif"), "rb") as gif_file:
            await update.message.reply_animation(
                animation=InputFile(gif_file),
                caption=f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π COLAB: {COLAB_URL}",
                parse_mode='HTML'
            )
    except:
        await update.message.reply_text(f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:</b>\n{COLAB_URL}", parse_mode='HTML')
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt")],
        [InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")],
        [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="tattoo_training")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–º—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    query = update.callback_query
    await query.answer()
    
    current_index = context.user_data.get("prompt_index", 0)
    prompt_data = PROMPTS[current_index % len(PROMPTS)]
    
    try:
        with open(os.path.join("static", prompt_data["image"]), "rb") as photo_file:
            await query.message.reply_photo(
                photo=InputFile(photo_file),
                caption=prompt_data["prompt"],
                parse_mode='HTML'
            )
    except:
        await query.message.reply_text(prompt_data["prompt"], parse_mode='HTML')
    
    context.user_data["prompt_index"] = (current_index + 1) % len(PROMPTS)
    
    keyboard = [
        [InlineKeyboardButton("–ï—â—ë –ø—Ä–∏–º–µ—Ä", callback_data="show_prompt")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("OVERLORD AI INK (Free Train)", callback_data="free_train")],
        [InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")],
        [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="tattoo_training")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=reply_markup, parse_mode='HTML')

async def free_train(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(f"<b>üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ:</b>\n{FREE_TRAIN_VIDEO}", parse_mode='HTML')
    
    description = (
        "<b>üñåÔ∏è OVERLORD AI INK (Free Train)</b>\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å 3 —Å—Ç–∏–ª—è–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_CHANNEL}"
    )
    await query.message.reply_text(description, parse_mode='HTML')
    
    try:
        with open(os.path.join("static", "14.gif"), "rb") as gif_file:
            await query.message.reply_animation(
                animation=InputFile(gif_file),
                caption=f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!</b>\nCOLAB: {COLAB_URL}",
                parse_mode='HTML'
            )
    except:
        await query.message.reply_text(f"<b>üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:</b>\n{COLAB_URL}", parse_mode='HTML')
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt")],
        [InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")],
        [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA", callback_data="tattoo_training")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def pro_version(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PRO –≤–µ—Ä—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(f"<b>üé¨ PRO –û–±—É—á–µ–Ω–∏–µ:</b>\n{PRO_VERSION_VIDEO}", parse_mode='HTML')
    
    pro_features = (
        "<b>üî• OVERLORD AI INK PRO - –ü–æ–ª–Ω–∞—è –í–µ—Ä—Å–∏—è —Å 30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏!</b>\n\n"
        "<b>–û—Ç–ª–∏—á–∏—è –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:</b>\n"
        "‚Ä¢ 30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å—Ç–∏–ª–µ–π\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π\n\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_CHANNEL}"
    )
    await query.message.reply_text(pro_features, parse_mode='HTML')

    try:
        with open(os.path.join("static", "9d.gif"), "rb") as pro_gif_file:
            keyboard_pro = [[InlineKeyboardButton("üî• –û—Ñ–æ—Ä–º–∏—Ç—å PRO", url=TRIBUT_URL)]]
            await query.message.reply_animation(
                animation=InputFile(pro_gif_file),
                caption="<b>üî• PRO –≤–µ—Ä—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!</b>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard_pro)
            )
    except:
        keyboard_pro = [[InlineKeyboardButton("üî• –û—Ñ–æ—Ä–º–∏—Ç—å PRO", url=TRIBUT_URL)]]
        await query.message.reply_text(
            "<b>üî• PRO –≤–µ—Ä—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!</b>",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard_pro)
        )

    keyboard = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def tattoo_training(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(f"<b>üé¨ –û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA:</b>\n{TATTOO_TRAINING_VIDEO}", parse_mode='HTML')
    
    description = (
        "<b>–û–±—É—á–µ–Ω–∏–µ –ò–∫–æ–Ω–∞</b>\n\n"
        "–°–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∫–æ–ª–æ—Ç—å –°–¢–ò–õ–¨ –∏ –±—ã—Å—Ç—Ä–æ –≤–æ—Ä–≤–∞—Ç—å—Å—è –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏—é.\n\n"
        "<b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!</b>"
    )
    await query.message.reply_text(description, parse_mode='HTML')
    
    keyboard = [
        [InlineKeyboardButton("–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA –≤ –ú–æ—Å–∫–≤–µ –∏ –ü–∏—Ç–µ—Ä–µ", callback_data="offline_training")],
        [InlineKeyboardButton("–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA", callback_data="online_training")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def offline_training(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(f"<b>üé¨ –û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ:</b>\n{OFFLINE_TRAINING_VIDEO}", parse_mode='HTML')
    
    description = (
        "<b>–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA –≤ –ú–æ—Å–∫–≤–µ –∏ –ü–∏—Ç–µ—Ä–µ</b>\n\n"
        "<b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:</b>\n"
        "‚Ä¢ –ó–∞–Ω—è—Ç–∏—è –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–∂–µ –∏ –Ω–∞ –ª—é–¥—è—Ö\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ò–ò\n\n"
        "<b>–î–µ—Ç–∞–ª–∏:</b>\n"
        "‚Ä¢ –°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è: 2 –º–µ—Å—è—Ü–∞\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 99 000‚ÇΩ\n\n"
        "<b>–ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ü–µ—Ä–≤—ã–π –£—Ä–æ–∫!</b>"
    )
    await query.message.reply_text(description, parse_mode='HTML')
    
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ü—Ä–æ–±–Ω—ã–π –£—Ä–æ–∫ / –û–±—É—á–µ–Ω–∏–µ", callback_data="sign_up")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def online_training(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA"""
    query = update.callback_query
    await query.answer()
    
    await query.message.reply_text(f"<b>üé¨ –û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ:</b>\n{ONLINE_TRAINING_VIDEO}", parse_mode='HTML')
    
    description = (
        "<b>–û–Ω–ª–∞–π–Ω –û–±—É—á–µ–Ω–∏–µ IKONA</b>\n\n"
        "<b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:</b>\n"
        "1. –û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–µ —Å –ò–ò\n"
        "2. –û–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∏ –ø–æ –Ω–∞–Ω–µ—Å–µ–Ω–∏—é —Ç–∞—Ç—É\n\n"
        "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–∞—Ç—É –º–∞—à–∏–Ω–∫–∞\n"
        "‚Ä¢ –ü–æ–º–æ—â—å —Å –ø–æ–∏—Å–∫–æ–º —Å–∞–ª–æ–Ω–∞ –∏ –º–æ–¥–µ–ª–∏\n\n"
        "<b>–î–µ—Ç–∞–ª–∏:</b>\n"
        "‚Ä¢ –°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è: 2 –º–µ—Å—è—Ü–∞\n"
        "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 79 000‚ÇΩ"
    )
    await query.message.reply_text(description, parse_mode='HTML')
    
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ / –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="sign_up")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def sign_up(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    message = (
        "<b>–ó–∞–ø–∏—Å—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ</b>\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏—è:\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @vladguro\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )
    await query.message.reply_text(message, parse_mode='HTML')
    
    keyboard = [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(show_prompt, pattern="^show_prompt$"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(free_train, pattern="^free_train$"))
    application.add_handler(CallbackQueryHandler(pro_version, pattern="^pro_version$"))
    application.add_handler(CallbackQueryHandler(tattoo_training, pattern="^tattoo_training$"))
    application.add_handler(CallbackQueryHandler(offline_training, pattern="^offline_training$"))
    application.add_handler(CallbackQueryHandler(online_training, pattern="^online_training$"))
    application.add_handler(CallbackQueryHandler(sign_up, pattern="^sign_up$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    application.run_polling()

if __name__ == "__main__":
    main()
