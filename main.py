import logging
import json
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TOKEN", "7972832759:AAGLOsFkxn_elDVNKsM2hk7Vt1qpoQawE2o")
FREE_TRAIN_VIDEO = "https://www.youtube.com/watch?v=10b_j5gBAg8"
PRO_VERSION_VIDEO = "https://www.youtube.com/watch?v=QKLOb6f5L-k"
COLAB_URL = "https://colab.research.google.com/drive/1lWfrS0Jh0B2B99IJ26aincVXylaoLuDq?usp=sharing"
TRIBUT_URL = "https://t.me/tribute/app?startapp=ep_8y0gVeOLXYRcOrfRtGTMLW8vu0C82z72WfxBEEtJz3ofJTky32"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤
with open("prompts.json", "r", encoding="utf-8") as f:
    PROMPTS = json.load(f)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_states[user_id] = {"prompt_index": 0}
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ YouTube –≤–∏–¥–µ–æ
    await update.message.reply_text(f"üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ: {FREE_TRAIN_VIDEO}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    description = (
        "üñåÔ∏è OVERLORD AI INK (Free Train)\n\n"
        "–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ sigilism, tribal, dark tattoo. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OVERLORD INK AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Å–∫–∞–∑–æ–∫\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. Sampling method - DPM++ 2M SDE. Steps - 20. Width - 720. Height - 980. CFG Scale - 4\n"
        "3. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
    )
    await update.message.reply_text(description)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ GIF
    gif_path = os.path.join("static", "14.gif")
    with open(gif_path, "rb") as gif_file:
        await update.message.reply_animation(
            animation=InputFile(gif_file),
            caption=f"üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é! –ò—Å–ø–æ–ª—å–∑—É–π COLAB: {COLAB_URL}"
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt"),
            InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–º—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_state = user_states.get(user_id, {"prompt_index": 0})
    current_index = user_state["prompt_index"]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º—Ç–∞
    prompt_data = PROMPTS[current_index]
    image_path = os.path.join("static", prompt_data["image"])
    prompt_text = prompt_data["prompt"]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with open(image_path, "rb") as photo_file:
        await query.message.reply_photo(
            photo=InputFile(photo_file),
            caption=prompt_text
        )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
    next_index = (current_index + 1) % len(PROMPTS)
    user_states[user_id] = {"prompt_index": next_index}
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("–ï—â—ë –ø—Ä–∏–º–µ—Ä", callback_data="show_prompt"),
            InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("OVERLORD AI INK (Free Train)", callback_data="free_train")],
        [InlineKeyboardButton("–ü–æ–ª–Ω–∞—è –í–µ—Ä—Å–∏—è OVERLORD AI INK PRO", callback_data="pro_version")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

async def free_train(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /start
    await query.message.reply_text(f"üé¨ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ: {FREE_TRAIN_VIDEO}")
    
    description = (
        "üñåÔ∏è OVERLORD AI INK (Free Train)\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å 3 —Å—Ç–∏–ª—è–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
    )
    await query.message.reply_text(description)
    
    gif_path = os.path.join("static", "14.gif")
    with open(gif_path, "rb") as gif_file:
        await query.message.reply_animation(
            animation=InputFile(gif_file),
            caption=f"üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é! COLAB: {COLAB_URL}"
        )
    
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞", callback_data="show_prompt"),
            InlineKeyboardButton("OVERLORD AI INK PRO", callback_data="pro_version")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def pro_version(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PRO –≤–µ—Ä—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ PRO –≤–∏–¥–µ–æ
    await query.message.reply_text(f"üé¨ PRO –û–±—É—á–µ–Ω–∏–µ: {PRO_VERSION_VIDEO}")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ PRO
    pro_features = (
        "üî• OVERLORD AI INK PRO - –ü–æ–ª–Ω–∞—è –í–µ—Ä—Å–∏—è —Å 30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏!\n\n"
        "–û—Ç–ª–∏—á–∏—è –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:\n"
        "‚úÖ 30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å—Ç–∏–ª–µ–π\n"
        "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.–í 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ\n"
        "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π\n"
        "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–º—Ç–æ–≤ \n\n"
        "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π!"
    )
    await query.message.reply_text(pro_features)
    
  # –û—Ç–ø—Ä–∞–≤–∫–∞ PRO GIF
    pro_gif_path = os.path.join("static", "9d.gif")
    with open(pro_gif_path, "rb") as pro_gif_file:
    await query.message.reply_animation(
        animation=InputFile(pro_gif_file),
        caption=(
            "üî• PRO –≤–µ—Ä—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!\n\n"
            "üî• –û—Ñ–æ—Ä–º–∏—Ç—å:\n"
            f"{TRIBUT_URL}"
         )
     )

    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(show_prompt, pattern="^show_prompt$"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(free_train, pattern="^free_train$"))
    application.add_handler(CallbackQueryHandler(pro_version, pattern="^pro_version$"))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
