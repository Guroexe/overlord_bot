# -*- coding: utf-8 -*-
import logging
import json
import os
import asyncio
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
    InputMediaAnimation
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from telegram.error import RetryAfter, TimedOut, BadRequest
from dotenv import load_dotenv

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ---
class MediaCache:
    def __init__(self):
        self.start_gif = None
        self.pro_gif = None
    
    async def load(self):
        try:
            with open(os.path.join("static", "14.gif"), "rb") as f:
                self.start_gif = InputMediaAnimation(f.read())
            with open(os.path.join("static", "9d.gif"), "rb") as f:
                self.pro_gif = InputMediaAnimation(f.read())
            logger.info("–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫—ç—à")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {e}")

media_cache = MediaCache()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
RU_VIDEOS = {
    "free_train": "https://youtu.be/mxxbhZ8SxTU",
    "pro_version": "https://youtube.com/shorts/7hP9p5GnXWM?si=9Zq_pArWAZaisSKR",
    "ikona_training": "https://www.youtube.com/watch?v=GX_ZbWx0oYY",
    "offline_training": "https://www.youtube.com/watch?v=Kopx3whZquc",
    "online_training": "https://www.youtube.com/watch?v=10b_j5gBAg8"
}

EN_VIDEOS = {
    "free_train": "https://youtu.be/RcLS9A24Kss",
    "pro_version": "https://youtube.com/shorts/_I2o5jc76Ug?si=DxRgG60LuHmbiN2w",
    "ikona_training": "https://www.youtube.com/watch?v=GX_ZbWx0oYY",
    "offline_training": "https://www.youtube.com/watch?v=Kopx3whZquc",
    "online_training": "https://www.youtube.com/watch?v=10b_j5gBAg8"
}

COLAB_URL = "https://colab.research.google.com/drive/1lWfrS0Jh0B2B99IJ26aincVXylaoLuDq?usp=sharing"
TRIBUT_URL = "https://t.me/tribute/app?startapp=ep_8y0gVeOLXYRcOrfRtGTMLW8vu0C82z72WfxBEEtJz3ofJTky32"

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏
RU_TEXTS = {
    "start": (
        "üñåÔ∏è **OVERLORD AI INK (Free Train)**\n\n"
        "**–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏** –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ:\n"
        "‚Ä¢ Sigilism\n"
        "‚Ä¢ Tribal\n"
        "‚Ä¢ Dark Tattoo\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç—ã **–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π**!\n\n"
        "**–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:**\n\n"
        "**1.** –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã\n\n"
        "**2.** –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n"
        "   ‚Ä¢ Sampling method: **DPM++ 2M SDE**\n"
        "   ‚Ä¢ Steps: **20**\n"
        "   ‚Ä¢ Width: **720**\n"
        "   ‚Ä¢ Height: **980**\n"
        "   ‚Ä¢ CFG Scale: **4**\n\n"
        "**3.** –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è **–±–µ—Å–ø–ª–∞—Ç–Ω–æ**!\n\n"
        "*(—Å–æ–∑–¥–∞—Ç–µ–ª—å - https://t.me/gurovlad)*"
    ),
    "pro_features": (
        "üî• **OVERLORD AI INK PRO**\n"
        "**–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å 30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏!**\n\n"
        "**–û–¢–õ–ò–ß–ò–Ø –û–¢ –ë–ï–°–ü–õ–ê–¢–ù–û–ô –í–ï–†–°–ò–ò:**\n\n"
        "‚úÖ **30+ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π** —Å—Ç–∏–ª–µ–π\n"
        "‚úÖ **–ë—ã—Å—Ç—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏** ‚Äî –≤ 4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ\n"
        "‚úÖ **–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π**\n"
        "‚úÖ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**\n"
        "‚úÖ **–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–º—Ç–æ–≤**\n\n"
        "**–ü–û–õ–ù–´–ô –ö–û–ù–¢–†–û–õ–¨ –ù–ê–î –ì–ï–ù–ï–†–ê–¶–ò–ï–ô!**\n\n"
        "*(—Å–æ–∑–¥–∞—Ç–µ–ª—å - https://t.me/gurovlad)*"
    ),
    "ikona_training": (
        "**–û–ë–£–ß–ï–ù–ò–ï –¢–ê–¢–£ IKONA**\n\n"
        "–û–±—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç **—Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∫–æ–ª–æ—Ç—å –°–¢–ò–õ–¨** –∏ –±—ã—Å—Ç—Ä–æ –≤–æ—Ä–≤–∞—Ç—å—Å—è –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏—é –∏ –∑–∞–Ω—è—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ!\n\n"
        "**–ß–¢–û –ú–´ –ü–†–ï–î–û–°–¢–ê–í–õ–Ø–ï–ú:**\n\n"
        "üéØ –ü—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º **—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è —ç—Å–∫–∏–∑–æ–≤**\n"
        "üéØ –û—Ç—Ç–æ—á–∏–º –¥–æ –∏–¥–µ–∞–ª–∞ **–Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞ –∫–æ–∂—É**\n"
        "üéØ –ü–æ–º–æ–∂–µ–º **–ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤** —É–∂–µ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è\n"
        "üéØ –†–∞–∑–≤–∏—Ç–∏–µ **—Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π**\n\n"
        "**–í–´–ë–ï–†–ò–¢–ï –ü–†–û–ì–†–ê–ú–ú–£, –ö–û–¢–û–†–ê–Ø –í–ê–ú –ë–û–õ–¨–®–ï –ü–û–î–•–û–î–ò–¢:**"
    ),
    "offline_training": (
        "**–û–§–§–õ–ê–ô–ù –û–ë–£–ß–ï–ù–ò–ï IKONA**\n"
        "**–ú–æ—Å–∫–≤–∞ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥**\n\n"
        "**–ü–†–û–ì–†–ê–ú–ú–ê –û–ë–£–ß–ï–ù–ò–Ø:**\n\n"
        "üë®‚Äçüè´ –ó–∞–Ω—è—Ç–∏—è —Å **–¥–µ–π—Å—Ç–≤—É—é—â–∏–º —Ç–∞—Ç—É-–º–∞—Å—Ç–µ—Ä–æ–º IKONA**\n"
        "üéØ –ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ **–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–∂–µ –∏ –∂–∏–≤—ã—Ö –ª—é–¥—è—Ö**\n"
        "ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ **—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ò–ò**\n"
        "üí™ –ò–¥–µ–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ **–Ω–∞–Ω–µ—Å–µ–Ω–∏—è –Ω–∞ –∫–æ–∂–µ**\n\n"
        "**–£–°–õ–û–í–ò–Ø:**\n\n"
        "‚è±Ô∏è **–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è:** 2 –º–µ—Å—è—Ü–∞\n"
        "üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 99 000 —Ä—É–±–ª–µ–π\n\n"
        "**–ë–ï–°–ü–õ–ê–¢–ù–´–ô –ü–ï–†–í–´–ô –£–†–û–ö!**\n\n"
        "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –≥–¥–µ –º—ã:\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ\n"
        "‚Ä¢ –î–∞–¥–∏–º –Ω–∞–±–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–∂–µ\n"
        "‚Ä¢ –í—ã –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ —Å–µ–±—è –≤ —Ä–æ–ª–∏ **–¢–∞—Ç—É-–ú–∞—Å—Ç–µ—Ä–∞**!"
    ),
    "online_training": (
        "**–û–ù–õ–ê–ô–ù –û–ë–£–ß–ï–ù–ò–ï IKONA**\n\n"
        "**–ü–†–û–ì–†–ê–ú–ú–ê –°–û–°–¢–û–ò–¢ –ò–ó:**\n\n"
        "ü§ñ **–ë–ª–æ–∫ ¬´–û–±—É—á–µ–Ω–∏–µ –ò–ò¬ª** ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è\n"
        "üë®‚Äçüíª **–û–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∏ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º** ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è\n\n"
        "**–ö–ê–ö –ü–†–û–•–û–î–ò–¢ –û–ë–£–ß–ï–ù–ò–ï:**\n\n"
        "üì± **–í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º** ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä—É–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∞–∂–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π\n\n"
        "üì¶ **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–∞—Ç—É-–º–∞—à–∏–Ω–∫–∞** ‚Äî –≤—ã—Å—ã–ª–∞–µ–º —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n\n"
        "üè¢ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –≤—ã–±–æ—Ä–µ —Å–∞–ª–æ–Ω–∞** ‚Äî –ø–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Å–∞–ª–æ–Ω –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n\n"
        "üë• **–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏** ‚Äî –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–µ–∞–Ω—Å –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∞—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        "**–£–°–õ–û–í–ò–Ø:**\n\n"
        "‚è±Ô∏è **–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è:** 2 –º–µ—Å—è—Ü–µ–≤\n"
        "üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 79 000 —Ä—É–±–ª–µ–π"
    ),
    "contact_for_trial": (
        "**–ó–ê–ü–ò–°–¨ –ù–ê –ü–†–û–ë–ù–´–ô –£–†–û–ö / –û–ë–£–ß–ï–ù–ò–ï**\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫, –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è:\n\n"
        "üë§ **@vladguro**\n\n"
        "**–û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!**"
    ),
    "contact_for_details": (
        "**–ü–û–î–†–û–ë–ù–ï–ï / –ó–ê–ü–ò–°–ê–¢–¨–°–Ø**\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è:\n\n"
        "üë§ **@vladguro**\n\n"
        "**–û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!**"
    ),
    "prompt_not_found": "‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
    "file_not_found": "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
    "error": "‚ö†Ô∏è –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ /start",
    "choose_action": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    "what_next": "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
    "main_menu": "**–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:**",
    "pro_caption": "üî• PRO –≤–µ—Ä—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!",
    "get_pro": "üî• –û—Ñ–æ—Ä–º–∏—Ç—å PRO",
    "back_to_main": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    "more_examples": "–ï—â—ë –ø—Ä–∏–º–µ—Ä",
    "prompt_example": "–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º—Ç–∞",
    "full_version": "–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø OVERLORD INK AI PRO +",
    "ikona_training_btn": "–û–±—É—á–µ–Ω–∏–µ –¢–∞—Ç—É IKONA",
    "free_train_btn": "OVERLORD AI INK (Free Train)",
    "offline_training_btn": "–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA –≤ –ú–æ—Å–∫–≤–µ –∏ –ü–∏—Ç–µ—Ä–µ",
    "online_training_btn": "–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ IKONA",
    "trial_lesson": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ü—Ä–æ–±–Ω—ã–π –£—Ä–æ–∫ / –û–±—É—á–µ–Ω–∏–µ",
    "more_details": "–ü–æ–¥—Ä–æ–±–Ω–µ–µ / –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
    "use_buttons": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
    "training_video": "–í–∏–¥–µ–æ –æ–±—É—á–µ–Ω–∏—è:",
    "start_generating": "–ù–∞—á–Ω–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!"
}

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏
EN_TEXTS = {
    "start": (
        "üñåÔ∏è **OVERLORD AI INK (Free Trial)**\n\n"
        "**Free version of neural network** for generating images in styles:\n"
        "‚Ä¢ Sigilism\n"
        "‚Ä¢ Tribal\n"
        "‚Ä¢ Dark Tattoo\n\n"
        "Create unique artworks **without limitations**!\n\n"
        "**HOW TO USE:**\n\n"
        "**1.** Enter text prompt in English or use ready examples\n\n"
        "**2.** Configure generation parameters:\n"
        "   ‚Ä¢ Sampling method: **DPM++ 2M SDE**\n"
        "   ‚Ä¢ Steps: **20**\n"
        "   ‚Ä¢ Width: **720**\n"
        "   ‚Ä¢ Height: **980**\n"
        "   ‚Ä¢ CFG Scale: **4**\n\n"
        "**3.** Generate images **for free**!\n\n"
        "*(creator - https://t.me/gurovlad)*"
    ),
    "pro_features": (
        "üî• **OVERLORD AI INK PRO**\n"
        "**Full version with 30+ unique styles!**\n\n"
        "**DIFFERENCES FROM FREE VERSION:**\n\n"
        "‚úÖ **30+ unique style** models\n"
        "‚úÖ **Faster generation** ‚Äî 4 times faster\n"
        "‚úÖ **Create your own styles**\n"
        "‚úÖ **Priority updates**\n"
        "‚úÖ **Many working prompts**\n\n"
        "**FULL CONTROL OVER GENERATION!**\n\n"
        "*(creator - https://t.me/gurovlad)*"
    ),
    "ikona_training": (
        "**IKONA TATTOO TRAINING**\n\n"
        "The training is created for those who want to **start tattooing STYLE right away** and quickly break into the industry and take their place!\n\n"
        "**WHAT WE PROVIDE:**\n\n"
        "üéØ Training program with creation of **your own sketch style**\n"
        "üéØ Perfecting **skin application** technique\n"
        "üéØ Help **attracting clients** already during training\n"
        "üéØ Development of **social networks**\n\n"
        "**CHOOSE THE PROGRAM THAT SUITS YOU BEST:**"
    ),
    "offline_training": (
        "**OFFLINE IKONA TRAINING**\n"
        "**Moscow and St. Petersburg**\n\n"
        "**TRAINING PROGRAM:**\n\n"
        "üë®‚Äçüè´ Classes with **current IKONA tattoo master**\n"
        "üéØ Practice on **artificial skin and live people**\n"
        "ü§ñ Creating **your own style using AI**\n"
        "üí™ Perfect **skin application** technique\n\n"
        "**CONDITIONS:**\n\n"
        "‚è±Ô∏è **Training duration:** 2 months\n"
        "üí∞ **Price:** 99,000 rubles\n\n"
        "**FREE FIRST LESSON!**\n\n"
        "Come to a trial lesson where we will:\n"
        "‚Ä¢ Tell you in detail about the program\n"
        "‚Ä¢ Let you make your first tattoo on artificial skin\n"
        "‚Ä¢ You will try yourself as a **Tattoo Master**!"
    ),
    "online_training": (
        "**ONLINE IKONA TRAINING**\n\n"
        "**THE PROGRAM CONSISTS OF:**\n\n"
        "ü§ñ **AI Training block** ‚Äî creating your own style\n"
        "üë®‚Äçüíª **Online lessons with teacher** ‚Äî application technique\n\n"
        "**HOW THE TRAINING GOES:**\n\n"
        "üì± **Video calls with teacher** ‚Äî enough for correct hand positioning and transfer of important knowledge\n\n"
        "üì¶ **Professional tattoo machine** ‚Äî we send with all necessary components for home training\n\n"
        "üè¢ **Support in choosing a salon** ‚Äî we will help you find a salon in your city\n\n"
        "üë• **Model search** ‚Äî we will organize a full session under the supervision of a teacher for your confidence\n\n"
        "**CONDITIONS:**\n\n"
        "‚è±Ô∏è **Training duration:** 2 months\n"
        "üí∞ **Price:** 79,000 rubles"
    ),
    "contact_for_trial": (
        "**SIGN UP FOR A TRIAL LESSON / TRAINING**\n\n"
        "To sign up for a trial lesson, training or to get more information, write indicating your request:\n\n"
        "üë§ **@vladguro**\n\n"
        "**We will reply as soon as possible!**"
    ),
    "contact_for_details": (
        "**MORE DETAILS / SIGN UP**\n\n"
        "To sign up for training or to get more information, write indicating your request:\n\n"
        "üë§ **@vladguro**\n\n"
        "**We will reply as soon as possible!**"
    ),
    "prompt_not_found": "‚ö†Ô∏è Prompt examples temporarily unavailable",
    "file_not_found": "‚ö†Ô∏è File not found",
    "error": "‚ö†Ô∏è If the buttons do not appear, press /start",
    "choose_action": "Choose action:",
    "what_next": "What's next?",
    "main_menu": "**MAIN MENU:**",
    "pro_caption": "üî• PRO version opens new generation possibilities!",
    "get_pro": "üî• Get PRO",
    "back_to_main": "Main menu",
    "more_examples": "More examples",
    "prompt_example": "Prompt example",
    "full_version": "FULL VERSION OVERLORD INK AI PRO +",
    "ikona_training_btn": "IKONA Tattoo Training",
    "free_train_btn": "OVERLORD AI INK (Free Trial)",
    "offline_training_btn": "Offline IKONA training in Moscow and St. Petersburg",
    "online_training_btn": "Online IKONA training",
    "trial_lesson": "Sign up for Trial Lesson / Training",
    "more_details": "More details / Sign up",
    "use_buttons": "Please use menu buttons",
    "training_video": "Training video:",
    "start_generating": "Start generating!"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤
try:
    with open("prompts.json", "r", encoding="utf-8") as f:
        PROMPTS = json.load(f)
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(PROMPTS)} –ø—Ä–æ–º—Ç–æ–≤")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ prompts.json: {str(e)}")
    PROMPTS = []

# --- –£—Ç–∏–ª–∏—Ç—ã ---
async def safe_delete_message(chat_id: int, message_id: int, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def send_with_retry(chat_id, content, context, retry_count=3):
    for attempt in range(retry_count):
        try:
            if isinstance(content, str):
                return await context.bot.send_message(chat_id, content)
            elif isinstance(content, dict):
                return await context.bot.send_animation(chat_id, **content)
        except RetryAfter as e:
            wait_time = e.retry_after + 1
            logger.warning(f"Rate limited. Waiting {wait_time} sec (attempt {attempt + 1})")
            await asyncio.sleep(wait_time)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            await asyncio.sleep(2)
    return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} {user.username}")
        
        context.user_data.clear()
        context.user_data["prompt_index"] = 0
        
        keyboard = [
            [
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
                InlineKeyboardButton("üá∫üá∏ English", callback_data="set_lang_en")
            ]
        ]
        
        await update.message.reply_text(
            "Please select language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await error_handler(update, context)

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE, lang: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        context.user_data["lang"] = lang
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        videos = RU_VIDEOS if lang == "ru" else EN_VIDEOS
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await query.message.reply_text(
            f"üé¨ {texts.get('training_video', '–í–∏–¥–µ–æ –æ–±—É—á–µ–Ω–∏—è:')} {videos['free_train']}\n\n"
            f"{texts['start']}\n\n"
            f"üöÄ {texts.get('start_generating', '–ù–∞—á–Ω–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:')} {COLAB_URL}",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data["last_msg_id"] = message.message_id
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton(texts["prompt_example"], callback_data="show_prompt"),
                InlineKeyboardButton(texts["full_version"], callback_data="pro_version")
            ],
            [
                InlineKeyboardButton(texts["ikona_training_btn"], callback_data="ikona_training")
            ]
        ]
        
        await query.message.reply_text(
            texts["choose_action"],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞: {e}")
        await error_handler(update, context)

async def show_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–º—Ç–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        
        if not PROMPTS:
            await query.message.reply_text(texts["prompt_not_found"])
            return
            
        current_index = context.user_data.get("prompt_index", 0)
        prompt_data = PROMPTS[current_index]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º—Ç–∞
        await query.message.reply_text(
            prompt_data["prompt"],
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        context.user_data["prompt_index"] = (current_index + 1) % len(PROMPTS)
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton(texts["more_examples"], callback_data="show_prompt"),
                InlineKeyboardButton(texts["back_to_main"], callback_data="main_menu")
            ]
        ]
        
        await query.message.reply_text(
            texts["what_next"],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º—Ç–∞: {e}")
        await error_handler(update, context)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        
        keyboard = [
            [InlineKeyboardButton(texts["free_train_btn"], callback_data="free_train")],
            [InlineKeyboardButton(texts["full_version"], callback_data="pro_version")],
            [InlineKeyboardButton(texts["ikona_training_btn"], callback_data="ikona_training")]
        ]
        
        await query.message.reply_text(
            texts["main_menu"],
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await error_handler(update, context)

async def free_train(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        videos = RU_VIDEOS if lang == "ru" else EN_VIDEOS
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            f"üé¨ {texts.get('training_video', '–í–∏–¥–µ–æ –æ–±—É—á–µ–Ω–∏—è:')} {videos['free_train']}\n\n"
            f"{texts['start']}\n\n"
            f"üöÄ {texts.get('start_generating', '–ù–∞—á–Ω–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:')} {COLAB_URL}",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton(texts["prompt_example"], callback_data="show_prompt"),
                InlineKeyboardButton(texts["full_version"], callback_data="pro_version")
            ],
            [
                InlineKeyboardButton(texts["ikona_training_btn"], callback_data="ikona_training")
            ]
        ]
        
        await query.message.reply_text(
            texts["choose_action"],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ free_train: {e}")
        await error_handler(update, context)

async def pro_version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """PRO –≤–µ—Ä—Å–∏—è"""
    try:
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        videos = RU_VIDEOS if lang == "ru" else EN_VIDEOS
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            f"üé¨ PRO –æ–±—É—á–µ–Ω–∏–µ: {videos['pro_version']}\n\n"
            f"{texts['pro_features']}",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è PRO
        keyboard = [
            [InlineKeyboardButton(texts["get_pro"], url=TRIBUT_URL)],
            [InlineKeyboardButton(texts["back_to_main"], callback_data="main_menu")]
        ]
        
        if media_cache.pro_gif:
            await query.message.reply_animation(
                animation=media_cache.pro_gif,
                caption=texts["pro_caption"],
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.message.reply_text(
                texts["pro_caption"],
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ pro_version: {e}")
        await error_handler(update, context)

async def ikona_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—É—á–µ–Ω–∏–µ IKONA"""
    try:
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        videos = RU_VIDEOS if lang == "ru" else EN_VIDEOS
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            f"üé¨ {texts.get('training_video', '–í–∏–¥–µ–æ –æ–±—É—á–µ–Ω–∏—è:')} {videos['ikona_training']}\n\n"
            f"{texts['ikona_training']}",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(texts["offline_training_btn"], callback_data="offline_training")],
            [InlineKeyboardButton(texts["online_training_btn"], callback_data="online_training")],
            [InlineKeyboardButton(texts["back_to_main"], callback_data="main_menu")]
        ]
        
        await query.message.reply_text(
            texts["choose_action"],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ ikona_training: {e}")
        await error_handler(update, context)

async def offline_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ"""
    try:
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        videos = RU_VIDEOS if lang == "ru" else EN_VIDEOS
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            f"üé¨ –û—Ñ—Ñ–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ: {videos['offline_training']}\n\n"
            f"{texts['offline_training']}",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton(texts["trial_lesson"], callback_data="contact_for_trial")],
            [InlineKeyboardButton(texts["back_to_main"], callback_data="main_menu")]
        ]
        
        await query.message.reply_text(
            texts["choose_action"],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ offline_training: {e}")
        await error_handler(update, context)

async def online_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ"""
    try:
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        videos = RU_VIDEOS if lang == "ru" else EN_VIDEOS
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            f"üé¨ –û–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏–µ: {videos['online_training']}\n\n"
            f"{texts['online_training']}",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton(texts["more_details"], callback_data="contact_for_details")],
            [InlineKeyboardButton(texts["back_to_main"], callback_data="main_menu")]
        ]
        
        await query.message.reply_text(
            texts["choose_action"],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ online_training: {e}")
        await error_handler(update, context)

async def contact_for_trial(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        
        await query.message.reply_text(
            texts["contact_for_trial"],
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ contact_for_trial: {e}")
        await error_handler(update, context)

async def contact_for_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"""
    try:
        query = update.callback_query
        await query.answer()
        
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        
        await query.message.reply_text(
            texts["contact_for_details"],
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ contact_for_details: {e}")
        await error_handler(update, context)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        lang = context.user_data.get("lang", "ru")
        texts = RU_TEXTS if lang == "ru" else EN_TEXTS
        
        await update.message.reply_text(
            texts["use_buttons"],
            reply_markup=InlineKeyboardMarkup(
                [InlineKeyboardButton(texts["back_to_main"], callback_data="main_menu")]
            )
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ handle_text: {e}")
        await error_handler(update, context)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error = context.error
    logger.error(msg="Exception occurred:", exc_info=error)
    
    if update and isinstance(update, Update):
        message = update.effective_message
        if message:
            try:
                lang = context.user_data.get("lang", "ru") if hasattr(context, 'user_data') else "ru"
                text = RU_TEXTS["error"] if lang == "ru" else EN_TEXTS["error"]
                await message.reply_text(text)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞
        await media_cache.load()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
        app.add_handler(CallbackQueryHandler(set_lang_ru, pattern="^set_lang_ru$"))
        app.add_handler(CallbackQueryHandler(set_lang_en, pattern="^set_lang_en$"))
        app.add_handler(CallbackQueryHandler(show_prompt, pattern="^show_prompt$"))
        app.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
        app.add_handler(CallbackQueryHandler(free_train, pattern="^free_train$"))
        app.add_handler(CallbackQueryHandler(pro_version, pattern="^pro_version$"))
        app.add_handler(CallbackQueryHandler(ikona_training, pattern="^ikona_training$"))
        app.add_handler(CallbackQueryHandler(offline_training, pattern="^offline_training$"))
        app.add_handler(CallbackQueryHandler(online_training, pattern="^online_training$"))
        app.add_handler(CallbackQueryHandler(contact_for_trial, pattern="^contact_for_trial$"))
        app.add_handler(CallbackQueryHandler(contact_for_details, pattern="^contact_for_details$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
        await app.run_polling()
        
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
